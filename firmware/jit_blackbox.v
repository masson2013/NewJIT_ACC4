// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="jit_blackbox,hls_ip_2015_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k325tffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.210000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=103,HLS_SYN_LUT=112}" *)

module jit_blackbox (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sI1_TDATA,
        sI1_TVALID,
        sI1_TREADY,
        sI2_TDATA,
        sI2_TVALID,
        sI2_TREADY,
        mO1_TDATA,
        mO1_TVALID,
        mO1_TREADY,
        arg1_V,
        arg2_V,
        arg3_V
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 3'b10;
parameter    ap_ST_st4_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] sI1_TDATA;
input   sI1_TVALID;
output   sI1_TREADY;
input  [31:0] sI2_TDATA;
input   sI2_TVALID;
output   sI2_TREADY;
output  [31:0] mO1_TDATA;
output   mO1_TVALID;
input   mO1_TREADY;
input  [15:0] arg1_V;
input  [15:0] arg2_V;
input  [15:0] arg3_V;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg sI1_TREADY;
reg sI2_TREADY;
reg mO1_TVALID;
reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_21;
reg   [31:0] i_op_assign_reg_81;
wire   [31:0] i_fu_90_p1;
wire   [31:0] tmp_fu_94_p1;
reg   [31:0] tmp_reg_123;
wire   [31:0] tmp_1_fu_98_p1;
reg   [31:0] tmp_1_reg_128;
wire   [0:0] tmp_2_fu_102_p2;
reg   [0:0] tmp_2_reg_133;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_bdd_58;
reg    ap_sig_bdd_68;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_sig_ioackin_mO1_TREADY;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
wire   [31:0] tmp_3_fu_107_p2;
reg   [31:0] tmp_3_reg_137;
wire   [31:0] i_1_fu_113_p2;
reg    ap_reg_ioackin_mO1_TREADY = 1'b0;
reg    ap_sig_cseq_ST_st4_fsm_2;
reg    ap_sig_bdd_131;
reg   [2:0] ap_NS_fsm;
reg    ap_sig_bdd_150;
reg    ap_sig_bdd_149;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ioackin_mO1_TREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_mO1_TREADY
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mO1_TREADY <= ap_const_logic_0;
    end else begin
        if (ap_sig_bdd_149) begin
            if (~((ap_sig_bdd_68 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(tmp_2_reg_133 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_mO1_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_reg_ioackin_mO1_TREADY <= ap_const_logic_0;
            end else if (ap_sig_bdd_150) begin
                ap_reg_ioackin_mO1_TREADY <= ap_const_logic_1;
            end
        end
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (tmp_2_fu_102_p2 == ap_const_lv1_0) & ~((ap_sig_bdd_68 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(tmp_2_reg_133 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_mO1_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(tmp_2_fu_102_p2 == ap_const_lv1_0) & ~((ap_sig_bdd_68 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(tmp_2_reg_133 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_mO1_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (tmp_2_fu_102_p2 == ap_const_lv1_0) & ~((ap_sig_bdd_68 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(tmp_2_reg_133 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_mO1_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(tmp_2_fu_102_p2 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_68 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(tmp_2_reg_133 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_mO1_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
        i_op_assign_reg_81 <= i_1_fu_113_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_op_assign_reg_81 <= i_fu_90_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        tmp_1_reg_128[15 : 0] <= tmp_1_fu_98_p1[15 : 0];
        tmp_reg_123[15 : 0] <= tmp_fu_94_p1[15 : 0];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~((ap_sig_bdd_68 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(tmp_2_reg_133 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_mO1_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
        tmp_2_reg_133 <= tmp_2_fu_102_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(tmp_2_fu_102_p2 == ap_const_lv1_0) & ~((ap_sig_bdd_68 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(tmp_2_reg_133 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_mO1_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
        tmp_3_reg_137 <= tmp_3_fu_107_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_2)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_2)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. ///
always @ (ap_sig_bdd_58)
begin
    if (ap_sig_bdd_58) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_21)
begin
    if (ap_sig_bdd_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_2 assign process. ///
always @ (ap_sig_bdd_131)
begin
    if (ap_sig_bdd_131) begin
        ap_sig_cseq_ST_st4_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_ioackin_mO1_TREADY assign process. ///
always @ (mO1_TREADY or ap_reg_ioackin_mO1_TREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_mO1_TREADY)) begin
        ap_sig_ioackin_mO1_TREADY = mO1_TREADY;
    end else begin
        ap_sig_ioackin_mO1_TREADY = ap_const_logic_1;
    end
end

/// mO1_TVALID assign process. ///
always @ (tmp_2_reg_133 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_68 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ioackin_mO1_TREADY)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(tmp_2_reg_133 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_68 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) & (ap_const_logic_0 == ap_reg_ioackin_mO1_TREADY))) begin
        mO1_TVALID = ap_const_logic_1;
    end else begin
        mO1_TVALID = ap_const_logic_0;
    end
end

/// sI1_TREADY assign process. ///
always @ (tmp_2_fu_102_p2 or tmp_2_reg_133 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_68 or ap_reg_ppiten_pp0_it0 or ap_sig_ioackin_mO1_TREADY or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(tmp_2_fu_102_p2 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_68 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(tmp_2_reg_133 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_mO1_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
        sI1_TREADY = ap_const_logic_1;
    end else begin
        sI1_TREADY = ap_const_logic_0;
    end
end

/// sI2_TREADY assign process. ///
always @ (tmp_2_fu_102_p2 or tmp_2_reg_133 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_68 or ap_reg_ppiten_pp0_it0 or ap_sig_ioackin_mO1_TREADY or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(tmp_2_fu_102_p2 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_68 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(tmp_2_reg_133 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_mO1_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
        sI2_TREADY = ap_const_logic_1;
    end else begin
        sI2_TREADY = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or tmp_2_fu_102_p2 or tmp_2_reg_133 or ap_sig_bdd_68 or ap_reg_ppiten_pp0_it0 or ap_sig_ioackin_mO1_TREADY or ap_reg_ppiten_pp0_it1)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : 
        begin
            if (~((tmp_2_fu_102_p2 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_68 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(tmp_2_reg_133 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_mO1_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else if (((tmp_2_fu_102_p2 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_68 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(tmp_2_reg_133 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_mO1_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
                ap_NS_fsm = ap_ST_st4_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end
        end
        ap_ST_st4_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_rst_n_inv assign process. ///
always @ (ap_rst_n)
begin
    ap_rst_n_inv = ~ap_rst_n;
end

/// ap_sig_bdd_131 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_131 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_149 assign process. ///
always @ (tmp_2_reg_133 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1)
begin
    ap_sig_bdd_149 = ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(tmp_2_reg_133 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1));
end

/// ap_sig_bdd_150 assign process. ///
always @ (mO1_TREADY or ap_sig_bdd_68 or ap_reg_ppiten_pp0_it0)
begin
    ap_sig_bdd_150 = (~(ap_sig_bdd_68 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) & (ap_const_logic_1 == mO1_TREADY));
end

/// ap_sig_bdd_21 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_21 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_58 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_58 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_68 assign process. ///
always @ (sI1_TVALID or sI2_TVALID or tmp_2_fu_102_p2)
begin
    ap_sig_bdd_68 = (((sI1_TVALID == ap_const_logic_0) & ~(tmp_2_fu_102_p2 == ap_const_lv1_0)) | (~(tmp_2_fu_102_p2 == ap_const_lv1_0) & (sI2_TVALID == ap_const_logic_0)));
end
assign i_1_fu_113_p2 = (tmp_1_reg_128 + i_op_assign_reg_81);
assign i_fu_90_p1 = arg1_V;
assign mO1_TDATA = tmp_3_reg_137;
assign tmp_1_fu_98_p1 = arg3_V;
assign tmp_2_fu_102_p2 = ($signed(i_op_assign_reg_81) < $signed(tmp_reg_123)? 1'b1: 1'b0);
assign tmp_3_fu_107_p2 = (sI2_TDATA + sI1_TDATA);
assign tmp_fu_94_p1 = arg2_V;
always @ (posedge ap_clk)
begin
    tmp_reg_123[31:16] <= 16'b0000000000000000;
    tmp_1_reg_128[31:16] <= 16'b0000000000000000;
end



endmodule //jit_blackbox

